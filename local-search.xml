<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OOP Study Record</title>
    <link href="/2022/10/17/OOP%20Study%20Record/"/>
    <url>/2022/10/17/OOP%20Study%20Record/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Friend"><a href="#1-Friend" class="headerlink" title="1. Friend"></a>1. Friend</h1><p>Key word: friend, can let a function or class access the private member in another class. </p><h2 id="1-1-Global-function-as-the-friend"><a href="#1-1-Global-function-as-the-friend" class="headerlink" title="1.1 Global function as the friend"></a>1.1 Global function as the friend</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">house</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">goodgay</span><span class="hljs-params">(house *house)</span></span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">house</span>()<br>    &#123;<br>        m_sittingroom = <span class="hljs-string">&#x27;s&#x27;</span>;<br>        m_bedroom = <span class="hljs-string">&#x27;b&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-type">char</span> m_sittingroom;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">char</span> m_bedroom;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Global function</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">goodgay</span><span class="hljs-params">(house *house)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout &lt;&lt; house-&gt;m_sittingroom &lt;&lt; house-&gt;bedroom &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>The global function, add <code>friend void goodgay(house *house);</code> in any place when declare a class, the function can access the private member.</p><h2 id="1-2-Class-as-the-friend"><a href="#1-2-Class-as-the-friend" class="headerlink" title="1.2 Class as the friend"></a>1.2 Class as the friend</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">building</span>&#123;&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">goodgay</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//access public &amp; private in building class</span><br>    <span class="hljs-built_in">goodgay</span>();<br><br>    building *b;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">building</span><br>&#123;<br><br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">goodgay</span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">building</span>();<br><br>    <span class="hljs-type">char</span> m_sittingroom;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">char</span> m_bedroom;<br>&#125;;<br><br><span class="hljs-comment">//declare the member function out the class</span><br>building::<span class="hljs-built_in">building</span>()<br>&#123;<br>    m_sittingroom = <span class="hljs-string">&#x27;s&#x27;</span>;<br>    m_bedroom = <span class="hljs-string">&#x27;b&#x27;</span>;<br>&#125;<br><br>goodgay::<span class="hljs-built_in">gay</span>()<br>&#123;<br>    <span class="hljs-comment">//create building obj</span><br>    <span class="hljs-comment">//building *b; in goodgay class</span><br>    b = <span class="hljs-keyword">new</span> building;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">goodgay::visit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    out &lt;&lt; b-&gt;m_sittingroom &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<br>    goodgay gg;<br>    gg.<span class="hljs-built_in">visit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>This example mainly describes how to declare member function out of the class.</p><h2 id="1-3-Member-function-as-the-friend"><a href="#1-3-Member-function-as-the-friend" class="headerlink" title="1.3. Member function as the friend"></a>1.3. Member function as the friend</h2><p><code>friend void goodgay::visit();</code>, declare out of the class.</p><h1 id="2-Member-Feature"><a href="#2-Member-Feature" class="headerlink" title="2. Member Feature"></a>2. Member Feature</h1><h2 id="2-1-Member-Variable-amp-Member-function"><a href="#2-1-Member-Variable-amp-Member-function" class="headerlink" title="2.1 Member Variable &amp; Member function"></a>2.1 Member Variable &amp; Member function</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">x</span><br>&#123;<br><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>An empty obj consumes one byte memory.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">x</span><br>&#123;<br>    <span class="hljs-type">int</span> m_x1; <span class="hljs-comment">// not static</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> m_x2; <span class="hljs-comment">// static</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>If an obj is not empty,  for example the upper class consumes 4 byte as the <strong>static variable is not belonged to the class</strong> and <strong>the member function is saved separately</strong> , which not belongs to the obj of the class either.</p><h2 id="2-2-This-Pointer"><a href="#2-2-This-Pointer" class="headerlink" title="2.2 This Pointer"></a>2.2 This Pointer</h2><p>The this pointer points to the invoked obj of the class, solves the name conflict and return the obj itself.</p><h3 id="2-2-1-Solve-the-Name-Conflict"><a href="#2-2-1-Solve-the-Name-Conflict" class="headerlink" title="2.2.1 Solve the Name Conflict"></a>2.2.1 Solve the Name Conflict</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Example</span>(<span class="hljs-type">int</span> num)<br>    &#123;<br>        num = num;<br>    &#125; <span class="hljs-comment">// this is the wrong constructor function</span><br><br>    <span class="hljs-built_in">Example</span>(<span class="hljs-type">int</span> num)<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;num = num;<br>    &#125;<span class="hljs-comment">// this one is right</span><br><br>    <span class="hljs-type">int</span> num;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Example <span class="hljs-title">ex</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>    std::cout &lt;&lt; ex.num;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-2-Return-the-Obj-Itself"><a href="#2-2-2-Return-the-Obj-Itself" class="headerlink" title="2.2.2 Return the Obj Itself"></a>2.2.2 Return the Obj Itself</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Example</span>(<span class="hljs-type">int</span> num)<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;num = num;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ExampleAddNum</span><span class="hljs-params">(Example &amp;in_ex)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;num += in_ex.num<br>    &#125;<br><br>    <span class="hljs-type">int</span> num;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Example ex1 = <span class="hljs-number">10</span>, ex2 = <span class="hljs-number">10</span>;<br>    ex2.<span class="hljs-built_in">ExampleAddNum</span>(ex1);<br>    std::cout &lt;&lt; ex2.num;<br>&#125;<br></code></pre></td></tr></table></figure><p>Now the ex2.num is 20;<br></p><p>The down case is <strong>a wrong one</strong>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Example ex1 = <span class="hljs-number">10</span>, ex2 = <span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//The return value is void, the compiler will report error.</span><br>    ex2.<span class="hljs-built_in">ExampleAddNum</span>(ex1).<span class="hljs-built_in">ExampleAddNum</span>(ex1).<span class="hljs-built_in">ExampleAddNum</span>(ex1);<br>    std::cout &lt;&lt; ex2.num;<br>&#125;<br></code></pre></td></tr></table></figure><p>If you want to add multiple times, you need to return the <strong>this pointer</strong>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Example</span>(<span class="hljs-type">int</span> num)<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;num = num;<br>    &#125;<br><br>    <span class="hljs-comment">/*you need to return the &amp; else the condition will be like</span><br><span class="hljs-comment">      the first time: ex2`.ExampleAddNum(ex1).ExampleAddNum(ex1)</span><br><span class="hljs-comment">      the second time: ex2``.ExampleAddNum(ex1)</span><br><span class="hljs-comment">      in other words, each time the function is invoked, </span><br><span class="hljs-comment">      a new ex2(obj) will be generated.</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function">Example&amp; <span class="hljs-title">ExampleAddNum</span><span class="hljs-params">(Example &amp;in_ex)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;num += in_ex.num<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> num;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="2-3-nullptr-Access-the-Member-function"><a href="#2-3-nullptr-Access-the-Member-function" class="headerlink" title="2.3 nullptr Access the Member function"></a>2.3 nullptr Access the Member function</h2><p>In the c++, <strong>the nullptr can access the member function.</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Class Example<br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowClassName</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Example\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ShowExampleNum</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::cout &lt;&lt; m_num &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-type">int</span> m_num;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Example *p = <span class="hljs-literal">nullptr</span>;<br>    p-&gt;<span class="hljs-built_in">ShowClassName</span>();<span class="hljs-comment">//will not report error</span><br>    p-&gt;<span class="hljs-built_in">ShowExampleNum</span>();<span class="hljs-comment">//will report error</span><br>&#125;<br></code></pre></td></tr></table></figure><p>In the <code>p-&gt;ShowExampleNum();</code> the inputted pointer is nullptr.As the real effect in this function is <code>std::cout &lt;&lt; this-&gt;m_num &lt;&lt; std::endl;</code>.The this pointer is nullptr.<br>If you do not want the error,you can add <code>if(this == nullptr)return;</code></p><h2 id="2-4-const-member-function"><a href="#2-4-const-member-function" class="headerlink" title="2.4. const member function"></a>2.4. const member function</h2><p>Const function:</p><ol><li>const function cannot change the member attribute</li><li>adding the “mutable” key words when decare member attribute, it can be changed in the const function.<br>Const obj: can only invokes the const function</li></ol><h3 id="2-4-1-Const-function"><a href="#2-4-1-Const-function" class="headerlink" title="2.4.1 Const function"></a>2.4.1 Const function</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showExample</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_A = <span class="hljs-number">100</span>;<br>        <span class="hljs-comment">//ACTUALLY it is this-&gt;m_A = 100;</span><br>    &#125;<br><br>    <span class="hljs-type">int</span> m_A;<br>&#125;;<br></code></pre></td></tr></table></figure><p>The this pointer is a pointer const, it can not be changed where it points at. The showExample function actually means <code>const Example* const this</code>, the pointed value can thus not be changed.<strong>The const added after the function means the point of the pointer is const</strong>, so the pointed value can not be changed.</p><h3 id="2-4-2-Const-obj"><a href="#2-4-2-Const-obj" class="headerlink" title="2.4.2 Const obj"></a>2.4.2 Const obj</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Example</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showExample</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_A = <span class="hljs-number">100</span>;<br>        <span class="hljs-comment">//ACTUALLY it is this-&gt;m_A = 100;</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">change</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        m_A = <span class="hljs-number">100</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> m_A;<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> m_B<br>&#125;;<br></code></pre></td></tr></table></figure><p>Now the value of m_B can be changed in the const function.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">const</span> Example ex;<br>    ex.m_A = <span class="hljs-number">100</span>;<span class="hljs-comment">//error</span><br>    ex.m_B = <span class="hljs-number">100</span>;<span class="hljs-comment">//correct</span><br>    ex.<span class="hljs-built_in">change</span>();<span class="hljs-comment">//error</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>The const obj can only invokes the const function.</strong></p><h1 id="3-Inheritance"><a href="#3-Inheritance" class="headerlink" title="3. Inheritance"></a>3. Inheritance</h1><h2 id="3-1-The-basic-grammar"><a href="#3-1-The-basic-grammar" class="headerlink" title="3.1 The basic grammar"></a>3.1 The basic grammar</h2><p>subclass ~ derived class<br>parent class ~ base class</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BasePage</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><br>&#125;;<br><br><span class="hljs-comment">//here is the public Inheritance</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">JAVA</span>: <span class="hljs-keyword">public</span> BasePage<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">void</span> content<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;JAVA&quot;</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="3-2-Inheritance-Way"><a href="#3-2-Inheritance-Way" class="headerlink" title="3.2 Inheritance Way"></a>3.2 Inheritance Way</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//The parent class</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> a;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">int</span> b;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> c;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-2-1-Public-Inheritance"><a href="#3-2-1-Public-Inheritance" class="headerlink" title="3.2.1 Public Inheritance"></a>3.2.1 Public Inheritance</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>: <span class="hljs-keyword">public</span> A<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> a;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">int</span> b;<br>inaccessible:<br>    <span class="hljs-type">int</span> c;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-2-2-Protected-Inheritance"><a href="#3-2-2-Protected-Inheritance" class="headerlink" title="3.2.2 Protected Inheritance"></a>3.2.2 Protected Inheritance</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>: <span class="hljs-keyword">protected</span> A<br>&#123;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">int</span> a;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">int</span> b;<br>inaccessible:<br>    <span class="hljs-type">int</span> c;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="3-2-3-Private-Inheritance"><a href="#3-2-3-Private-Inheritance" class="headerlink" title="3.2.3 Private Inheritance"></a>3.2.3 Private Inheritance</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span>: <span class="hljs-keyword">private</span> A<br>&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> a;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> b;<br>inaccessible:<br>    <span class="hljs-type">int</span> c;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="3-3-The-obj-model-in-Inheritance"><a href="#3-3-The-obj-model-in-Inheritance" class="headerlink" title="3.3 The obj model in Inheritance"></a>3.3 The obj model in Inheritance</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> a;<br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">int</span> b;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> c;<br>&#125;;<br></code></pre></td></tr></table></figure><p>If declare another class</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> d;<br>&#125;;<br></code></pre></td></tr></table></figure><p>The size of class B is 16 byte, except the static member variable, the private member is <strong>hided</strong> bt the compiler but is still inherited by the subclass. </p><h2 id="3-4-The-Constructor-and-Destructor-Sequence"><a href="#3-4-The-Constructor-and-Destructor-Sequence" class="headerlink" title="3.4 The Constructor and Destructor Sequence"></a>3.4 The Constructor and Destructor Sequence</h2><p><strong>Parent constructor</strong><br>-&gt;Subclass constructor<br>-&gt;Subclass destructor<br>-&gt;<strong>Parent destructor</strong></p><h2 id="3-5-Process-of-Same-Name-Member"><a href="#3-5-Process-of-Same-Name-Member" class="headerlink" title="3.5 Process of Same Name Member"></a>3.5 Process of Same Name Member</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">100</span>;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>: <span class="hljs-keyword">public</span> A<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">200</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    B b;<br>    std::cout &lt;&lt; b.a;<br>&#125;<br></code></pre></td></tr></table></figure><p>The print consequence will be 200, which is the subclass member variable.If you want to access the parent class member, use <code>b.A::a</code>. When it comes to the same name member function, use<code>b.A::func()</code>, <strong>the same as the overloaded function</strong>, as the <strong>subclass hides the same name function in parent class</strong>.</p><h2 id="3-6-Process-of-Same-Name-Static-Member"><a href="#3-6-Process-of-Same-Name-Static-Member" class="headerlink" title="3.6 Process of Same Name Static Member"></a>3.6 Process of Same Name Static Member</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">base</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> m_A;<br>&#125;;<br><span class="hljs-type">int</span> base::m_A = <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sub</span>: <span class="hljs-keyword">public</span> base<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> m_A;<br>&#125;;<br><span class="hljs-type">int</span> sub::m_A = <span class="hljs-number">200</span>;<br></code></pre></td></tr></table></figure><p><strong>Access by Obj:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    sub de;<br>    std::cout &lt;&lt; de.m_A &lt;&lt; std::endl;<br>    std::cout &lt;&lt; de.base::m_A &lt;&lt; std::endl;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Access by Class Name:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    sub de;<br>    std::cout &lt;&lt; sub::m_A &lt;&lt; std::endl;<br>    std::cout &lt;&lt; sub::base::m_A &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>The same as the static member function.</p><h2 id="3-7-Multiple-Inheritance"><a href="#3-7-Multiple-Inheritance" class="headerlink" title="3.7 Multiple Inheritance"></a>3.7 Multiple Inheritance</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>: <span class="hljs-keyword">public</span> B, <span class="hljs-keyword">public</span> C, <span class="hljs-keyword">public</span> D<br>&#123;<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>This inheritance way is <strong>not common</strong> in c++, as the same name member is hard to deal with.</p><h2 id="3-8-Diamond-Inheritance"><a href="#3-8-Diamond-Inheritance" class="headerlink" title="3.8 Diamond Inheritance"></a>3.8 Diamond Inheritance</h2><p>Detailed talked in the Polymorphism</p><h1 id="4-Polymorphism"><a href="#4-Polymorphism" class="headerlink" title="4. Polymorphism"></a>4. Polymorphism</h1><h2 id="4-1-Basic-Grammar"><a href="#4-1-Basic-Grammar" class="headerlink" title="4.1 Basic Grammar"></a>4.1 Basic Grammar</h2><p>Tips: The pointer or &amp; can directly point at the Base class obj<br>Dynamic polymorphism: Address late binding</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Animal Talking&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>: <span class="hljs-keyword">public</span>: Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Cat Talking&quot;</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">do_speak</span><span class="hljs-params">(Animal &amp;an)</span></span><br><span class="hljs-function"></span>&#123;<br>    an.<span class="hljs-built_in">speak</span>();<br>&#125;<br><span class="hljs-comment">//According to the tips above, you don not need to change the type</span><br><span class="hljs-comment">//Animal &amp; animal = cat</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Cat cat;<br>    <span class="hljs-built_in">do_speak</span>(cat)<br>&#125;<br></code></pre></td></tr></table></figure><p>In this case the result is “Animal talking” as the address <strong>is early bound.</strong> The func&#96;s address should not be early bound if you want realize different functions.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//virtual function</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Animal Talking&quot;</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Adding the key word <code>virtual</code>can realize different function and the address of the speak function is late bound.The sub class need to rewrite the virtual function in the base class.<strong>Not overload.</strong> When the base class reference(&amp;) or pointer(*) point at the obj of sub class can you use dynamic polymorphism.</p><h2 id="4-2-Underlying-Principle"><a href="#4-2-Underlying-Principle" class="headerlink" title="4.2 Underlying Principle"></a>4.2 Underlying Principle</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Animal Talking&quot;</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>sizeof(Animal) &#x3D; 1.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Animal Talking&quot;</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>sizeof(Animal) &#x3D; 4.<br>4 bytes ~ virtual function pointer(vfptr). Vfptr contains the Virtual Function Table(vftable) that contains the address of the virtual function.<br>In the Animal Class, <strong>vfptr -&gt; vfable( &amp;Animal::speak( ) ).</strong> In the Cat, if the virtual <strong>has not</strong> been written, then <strong>vfptr -&gt; vfable( &amp;Animal::speak( ) ).</strong> While the <strong>rewritten</strong> virtual  function <strong>covers</strong> the virtual function of base class. So now, <strong>vfptr -&gt; vfable( &amp;Cat::speak( ) ).</strong></p><h2 id="4-3-Abstract-Class"><a href="#4-3-Abstract-Class" class="headerlink" title="4.3 Abstract Class"></a>4.3 Abstract Class</h2><p>If class include <strong>more than one(include) Pure Virtual Function</strong>, we call te class abstract class.Pure Virtual Function: <code>virtual void func() = 0</code>.</p><ol><li>The base class is unable to instantiate.</li><li>The sub class must written the pure virtual function.</li></ol><h2 id="4-4-Virtual-Destruction-Function"><a href="#4-4-Virtual-Destruction-Function" class="headerlink" title="4.4 Virtual Destruction Function"></a>4.4 Virtual Destruction Function</h2><p>When using the pointer in base class point at the obj in sub class, the pointer will not do invoke the destruction function in the sub class. By using <code>virtual ~name()</code>, the destruction function will be invoked.<br>The virtual and pure virtual destruction function ned to be realized as the base class may also have memory <strong>in the heap area.</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Animal</span>() = <span class="hljs-number">0</span>;<br>&#125;<br><br>Animal::~<span class="hljs-built_in">Animal</span>()<br>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;The destruction of Animal&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/01/hello-world/"/>
    <url>/2022/05/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
